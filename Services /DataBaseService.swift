import Foundation // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å Foundation, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
import SQLite3 // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å SQLite3 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å DatabaseService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
final class DatabaseService {
    
    // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞
    static let shared = DatabaseService()
    
    private var db: OpaquePointer? // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –°–æ–∑–¥–∞—ë–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π
    private let queue = DispatchQueue(label: "com.imyarek.database.queue", qos: .utility)
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    private init() {
        openDatabase() // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        createTables() // –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    private func openDatabase() {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ)
        guard let docsUrl = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            fatalError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤") // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–æ .sqlite —Ñ–∞–π–ª–∞
        let dbPath = docsUrl.appendingPathComponent("imyarek.sqlite").path

//        // ‚úÖ –í—ã–≤–æ–¥–∏–º –ø—É—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
//        print("üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: \(dbPath)")

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É
        if sqlite3_open(dbPath, &db) != SQLITE_OK {
            fatalError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏ \(dbPath)") // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    private func createTables() {
        // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let createUserTable = """
        CREATE TABLE IF NOT EXISTS User (
            ID TEXT PRIMARY KEY,
            Name TEXT,
            Description TEXT,
            SocialLinks TEXT,
            PhotoPath TEXT,
            BanStatus INTEGER DEFAULT 0
        );
        """
        
        // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —á–∞—Ç–æ–≤
        let createChatTable = """
        CREATE TABLE IF NOT EXISTS Chat (
            ID TEXT PRIMARY KEY,
            User1ID TEXT,
            User2ID TEXT,
            StartTime INTEGER
        );
        """
        
        // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        let createMessageTable = """
        CREATE TABLE IF NOT EXISTS Message (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            ChatID TEXT,
            SenderID TEXT,
            Text TEXT,
            Timestamp INTEGER
        );
        """
        
        // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∂–∞–ª–æ–±
        let createComplaintTable = """
        CREATE TABLE IF NOT EXISTS Complaint (
            ID TEXT PRIMARY KEY,
            Reason TEXT,
            DateCreated INTEGER,
            UserID TEXT,
            MessageID INTEGER
        );
        """
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        _ = executeSQL(createUserTable)
        _ = executeSQL(createChatTable)
        _ = executeSQL(createMessageTable)
        _ = executeSQL(createComplaintTable)
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞
    @discardableResult
    private func executeSQL(_ sql: String) -> Bool {
        var errorMessage: UnsafeMutablePointer<Int8>? = nil // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let result = sqlite3_exec(db, sql, nil, nil, &errorMessage) // –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å
        if result != SQLITE_OK, let errorMessage = errorMessage {
            let message = String(cString: errorMessage) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
            print("SQL error: \(message)") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return false // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        }
        return true // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
    }
    
    // –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    deinit {
        sqlite3_close(db) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    }
    
    // MARK: - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    func insertUser(id: String, name: String, description: String?, socialLinks: String?, photoPath: String?) async {
        await withCheckedContinuation { continuation in // –ò—Å–ø–æ–ª—å–∑—É–µ–º checked continuation –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            queue.async { [weak self] in // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏
                guard let self = self else {
                    continuation.resume() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω
                    return
                }
                
                // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let sql = """
                INSERT INTO User (ID, Name, Description, SocialLinks, PhotoPath)
                VALUES (?, ?, ?, ?, ?);
                """
                
                var stmt: OpaquePointer? = nil // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
                if sqlite3_prepare_v2(self.db, sql, -1, &stmt, nil) == SQLITE_OK { // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–∞–ø—Ä–æ—Å—É
                    sqlite3_bind_text(stmt, 1, (id as NSString).utf8String, -1, nil)
                    sqlite3_bind_text(stmt, 2, (name as NSString).utf8String, -1, nil)
                    
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    if let desc = description {
                        sqlite3_bind_text(stmt, 3, (desc as NSString).utf8String, -1, nil)
                    } else {
                        sqlite3_bind_null(stmt, 3) // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º NULL, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    }
                    
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    if let social = socialLinks {
                        sqlite3_bind_text(stmt, 4, (social as NSString).utf8String, -1, nil)
                    } else {
                        sqlite3_bind_null(stmt, 4) // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º NULL, –µ—Å–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    }
                    
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    if let photo = photoPath {
                        sqlite3_bind_text(stmt, 5, (photo as NSString).utf8String, -1, nil)
                    } else {
                        sqlite3_bind_null(stmt, 5) // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º NULL, –µ—Å–ª–∏ –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    }
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É
                    if sqlite3_step(stmt) != SQLITE_DONE {
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    }
                } else {
                    print("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                }
                sqlite3_finalize(stmt) // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                continuation.resume() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            }
        }
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    func fetchMessages(forChat chatID: String) async -> [(id: Int, senderID: String, text: String, timestamp: Int)] {
        await withCheckedContinuation { continuation in // –ò—Å–ø–æ–ª—å–∑—É–µ–º checked continuation –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            queue.async { [weak self] in // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏
                guard let self = self else {
                    continuation.resume(returning: []) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω
                    return
                }
                
                // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
                let sql = "SELECT ID, SenderID, Text, Timestamp FROM Message WHERE ChatID = ? ORDER BY Timestamp;"
                var stmt: OpaquePointer? // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
                var messages = [(Int, String, String, Int)]() // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                
                if sqlite3_prepare_v2(self.db, sql, -1, &stmt, nil) == SQLITE_OK { // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å
                    sqlite3_bind_text(stmt, 1, (chatID as NSString).utf8String, -1, nil) // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º ID —á–∞—Ç–∞
                    
                    while sqlite3_step(stmt) == SQLITE_ROW { // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–±–æ—Ä–∫–∏
                        let id = sqlite3_column_int(stmt, 0) // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                        let senderCStr = sqlite3_column_text(stmt, 1) // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        let textCStr = sqlite3_column_text(stmt, 2) // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        let timestamp = sqlite3_column_int(stmt, 3) // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à—Ç–∞–º–ø
                        
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
                        let senderID = senderCStr != nil ? String(cString: senderCStr!) : ""
                        let text = textCStr != nil ? String(cString: textCStr!) : ""
                        messages.append((Int(id), senderID, text, Int(timestamp))) // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
                    }
                } else {
                    print("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                }
                sqlite3_finalize(stmt) // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                continuation.resume(returning: messages) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            }
        }
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    func insertMessage(chatID: String, senderID: String, text: String, timestamp: Int) async {
        await withCheckedContinuation { continuation in // –ò—Å–ø–æ–ª—å–∑—É–µ–º checked continuation –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            queue.async { [weak self] in // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏
                guard let self = self else {
                    continuation.resume() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω
                    return
                }
                
                // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                let sql = """
                INSERT INTO Message (ChatID, SenderID, Text, Timestamp)
                VALUES (?, ?, ?, ?);
                """
                
                var stmt: OpaquePointer? = nil // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
                if sqlite3_prepare_v2(self.db, sql, -1, &stmt, nil) == SQLITE_OK { // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–∞–ø—Ä–æ—Å—É
                    sqlite3_bind_text(stmt, 1, (chatID as NSString).utf8String, -1, nil)
                    sqlite3_bind_text(stmt, 2, (senderID as NSString).utf8String, -1, nil)
                    sqlite3_bind_text(stmt, 3, (text as NSString).utf8String, -1, nil)
                    sqlite3_bind_int(stmt, 4, Int32(timestamp)) // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à—Ç–∞–º–ø
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç–∞–≤–∫—É
                    if sqlite3_step(stmt) != SQLITE_DONE {
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    }
                } else {
                    print("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                }
                sqlite3_finalize(stmt) // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                continuation.resume() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            }
        }
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞
    func deleteOldChats(olderThan timestamp: Int) async {
        await withCheckedContinuation { continuation in // –ò—Å–ø–æ–ª—å–∑—É–µ–º checked continuation –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            queue.async { [weak self] in // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏
                guard let self = self else {
                    continuation.resume() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω
                    return
                }
                
                // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞
                let deleteMessagesSQL = "DELETE FROM Message WHERE ChatID IN (SELECT ID FROM Chat WHERE StartTime < ?);"
                // SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞
                let deleteChatsSQL = "DELETE FROM Chat WHERE StartTime < ?;"
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞
                for sql in [deleteMessagesSQL, deleteChatsSQL] {
                    var stmt: OpaquePointer? // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å
                    if sqlite3_prepare_v2(self.db, sql, -1, &stmt, nil) == SQLITE_OK { // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å
                        sqlite3_bind_int(stmt, 1, Int32(timestamp)) // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à—Ç–∞–º–ø
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                        if sqlite3_step(stmt) != SQLITE_DONE {
                            print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SQL: \(sql)") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                        }
                    } else {
                        print("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è SQL: \(sql)") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    }
                    sqlite3_finalize(stmt) // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                }
                continuation.resume() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            }
        }
    }
}
